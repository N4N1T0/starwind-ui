---
import type { HTMLAttributes } from "astro/types";

type Props = HTMLAttributes<"button"> & {
  /**
   * When true, the component will render its child element with a simple wrapper instead of a button component
   */
  asChild?: boolean;
  /**
   * Optional ID of the alert dialog to trigger. If not provided and the trigger is inside an AlertDialog component,
   * it will automatically target that alert dialog. Required when used outside an AlertDialog component.
   */
  for?: string;
};

const { class: className, asChild = false, for: alertDialogFor, ...rest } = Astro.props;

// Get the first child element if asChild is true
let hasChildren = false;
if (Astro.slots.has("default")) {
  hasChildren = true;
}
---

{
  asChild && hasChildren ? (
    <div 
      class:list={["starwind-alert-dialog-trigger", className]} 
      data-as-child 
      data-alert-dialog-for={alertDialogFor}
      aria-controls={alertDialogFor}
      {...rest}
    >
      <slot />
    </div>
  ) : (
    <button
      type="button"
      aria-haspopup="dialog"
      aria-controls={alertDialogFor}
      class:list={["starwind-alert-dialog-trigger", className]}
      data-alert-dialog-for={alertDialogFor}
      {...rest}
    >
      <slot />
    </button>
  )
}